{"version":3,"sources":["logo.svg","components/Employee/index.js","App.js","reportWebVitals.js","index.js"],"names":["Employee","props","name","email","phone","App","useState","employees","setEmployees","nameFilter","setNameFilter","regenerated","setRegenerated","useEffect","fetch","then","res","json","data","results","mapped","map","result","first","last","regenerate","className","type","onChange","e","target","value","onClick","filtered","filter","toLowerCase","includes","x","sort","a","b","parseInt","length","employee","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAAe,I,YCaAA,MAXf,SAAkBC,GAEhB,OACE,+BACI,6BAAKA,EAAMC,OACX,6BAAKD,EAAME,QACX,6BAAKF,EAAMG,YCyEJC,MA5Ef,WAEE,MAAgCC,mBAAS,IAAzC,mBAAKC,EAAL,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAKG,EAAL,KAAiBC,EAAjB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAKK,EAAL,KAAkBC,EAAlB,KAEAC,qBAAU,WAGRC,MAFU,yCAGTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAIC,EAAUD,EAAKC,QAEfC,EAASD,EAAQE,KAAI,SAACC,GACxB,MAAO,CACLpB,KAAMoB,EAAOpB,KAAKqB,MAAM,IAAID,EAAOpB,KAAKsB,KACxCrB,MAAOmB,EAAOnB,MACdC,MAAOkB,EAAOlB,UAGlBQ,EAAeQ,GACfZ,EAAaW,QAEd,IAEH,IAAIM,EAAa,WACff,EAAc,IACd,IAEIU,EAFUb,EAEOc,KAAI,SAACC,GACxB,MAAO,CACLpB,KAAMoB,EAAOpB,KAAKqB,MAAM,IAAID,EAAOpB,KAAKsB,KACxCrB,MAAOmB,EAAOnB,MACdC,MAAOkB,EAAOlB,UAGlBQ,EAAeQ,IAejB,OACE,sBAAKM,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAInB,EAAcmB,EAAEC,OAAOC,UACzD,wBAAQC,QAfS,WACnBP,IACA,IAAIQ,EAAWtB,EAAYuB,QAAO,SAAAZ,GAAM,OAAIA,EAAOpB,KAAKiC,cAAcC,SAAS3B,EAAW0B,kBAC1FvB,EAAeqB,IAYb,4BACA,wBAAQD,QAVS,WACnBP,IACA,IAAIY,EAAI1B,EAAY2B,MAAK,SAACC,EAAGC,GAAJ,OAAUC,SAASF,EAAEnC,OAASqC,SAASD,EAAEpC,UAClEQ,EAAeyB,IAOb,4BACA,wBAAQL,QAASP,EAAjB,0BACA,kCACE,gCACE,+BACE,sCACA,uCACA,4CAGJ,gCACGd,EAAY+B,OAAS,EAAI/B,EAAYU,KAAI,SAACsB,GACzC,OAAQ,cAAC,EAAD,CAAUzC,KAAMyC,EAASzC,KAAMC,MAAOwC,EAASxC,MAAOC,MAAOuC,EAASvC,WAC3E,uDC9DAwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8eefae58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nfunction Employee(props) {\r\n\r\n  return (\r\n    <tr>\r\n        <th>{props.name}</th>\r\n        <th>{props.email}</th>\r\n        <th>{props.phone}</th>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Employee;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport Employee from \"./components/Employee\"\n\nfunction App() {\n\n  let [employees, setEmployees] = useState([]);\n  let [nameFilter, setNameFilter] = useState(\"\");\n  let [regenerated, setRegenerated] = useState([]);\n\n  useEffect(() => {\n    let url = \"https://randomuser.me/api/?results=50\";\n\n    fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      let results = data.results;\n\n      let mapped = results.map((result) => {\n        return {\n          name: result.name.first+\" \"+result.name.last,\n          email: result.email,\n          phone: result.phone\n        }\n      });\n      setRegenerated(mapped);\n      setEmployees(results);\n    })\n  }, []);\n\n  let regenerate = () => {\n    setNameFilter(\"\");\n    let results = employees;\n\n    let mapped = results.map((result) => {\n      return {\n        name: result.name.first+\" \"+result.name.last,\n        email: result.email,\n        phone: result.phone\n      }\n    });\n    setRegenerated(mapped);\n  }\n\n  const filterByName = () => {\n    regenerate();\n    let filtered = regenerated.filter(result => result.name.toLowerCase().includes(nameFilter.toLowerCase()));\n    setRegenerated(filtered);\n  }\n\n  const sortFunction = () => {\n    regenerate();\n    let x = regenerated.sort((a, b) => parseInt(a.phone) - parseInt(b.phone))\n    setRegenerated(x);\n  }\n\n  return (\n    <div className=\"App\">\n      <input type=\"text\" onChange={e => setNameFilter(e.target.value)} />\n      <button onClick={filterByName}>Filter by name</button>\n      <button onClick={sortFunction}>Order by phone</button>\n      <button onClick={regenerate}>Clear Filter</button>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Phone</th>\n          </tr>\n        </thead>\n        <tbody>\n          {regenerated.length > 0 ? regenerated.map((employee) => {\n            return (<Employee name={employee.name} email={employee.email} phone={employee.phone}/>)\n          }) : <p>No employees!</p>}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}